name: "CI:DEV"
env:
  REACT_APP_CSOUND_FLOSS_VERSION: $GITHUB_SHA
on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
jobs:
  build-dev:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v22
        with:
          nix_path: nixpkgs=https://github.com/NixOS/nixpkgs/archive/866431777b6c766cea0db7aad347824d3816be68.tar.gz
      - uses: cachix/cachix-action@v14
        with:
          name: csound-flossmanual
          signingKey: "${{ secrets.CACHIX_SIGNING_KEY }}"
      - name: Install build dependencies from cache
        run: |
          nix-env -i -f shell.nix
          mkdir -p $HOME/.local/share/fonts
          cp -rf $(nix-build --no-out-link '<nixpkgs>' -A fira)/share/fonts/* \
            $HOME/.local/share/fonts
          fc-cache -f -v
      - name: Install npm dependencies via yarn
        run: yarn
      - name: Test
        run: yarn test:ci
      - name: Build the book website
        run: yarn build
      - name: Build pdf
        run: |
          yarn build:pdf
          mkdir -p build/build
          mv *.pdf build/build/csound-flossmanual-${REACT_APP_CSOUND_FLOSS_VERSION}.pdf
      - name: Build French pdf
        run: |
          LANG=fr yarn build:pdf
          mv *_fr.pdf build/build/csound-flossmanual-fr-${REACT_APP_CSOUND_FLOSS_VERSION}.pdf
      - name: Build epub
        run: |
          yarn build:epub
          mv *.epub build/build/csound-flossmanual-${REACT_APP_CSOUND_FLOSS_VERSION}.epub
      - name: Build French epub
        run: |
          LANG=fr yarn build:epub
          mv *_fr.epub build/build/csound-flossmanual-fr-${REACT_APP_CSOUND_FLOSS_VERSION}.epub
      - name: Build odt
        run: |
          yarn build:odt
          mv *.odt build/build/csound-flossmanual-${REACT_APP_CSOUND_FLOSS_VERSION}.odt
      - name: Build French odt
        run: |
          LANG=fr yarn build:odt
          mv *_fr.odt build/build/csound-flossmanual-fr-${REACT_APP_CSOUND_FLOSS_VERSION}.odt
      - name: Compress dist to zip
        run: |
          nix-env -f '<nixpkgs>' -iA zip
          zip -r dist.zip build
      - name: Archive Production Artifact
        uses: actions/upload-artifact@master
        with:
          name: dist
          path: dist.zip

  deploy-dev:
    if: github.event_name == 'push'
    name: DeployDev
    needs: build-dev
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master
      - name: Download Artifact
        uses: actions/download-artifact@master
        with:
          name: dist
      - name: Uncompress dist archive
        run: |
          sudo apt-get install unzip
          unzip ./dist.zip
      - name: Deploy to Firebase
        uses: w9jds/firebase-action@master
        with:
          args: deploy -P develop --only hosting
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY_DEV }}
